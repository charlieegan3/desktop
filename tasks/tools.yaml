- name: install go tools
  become: yes
  become_user: "{{ username }}"
  shell: "{{ GOROOT }}/bin/go get -u {{ item.url }}"
  environment:
    GOPATH: "{{ GOPATH }}"
    GOROOT: "{{ GOROOT }}"
    GO111MODULE: "{{ GO111MODULE }}"
  args:
    creates: "{{ GOPATH }}/bin/{{ item.name }}"
  with_items:
  - url: github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb
    name: jb
  - url: github.com/brancz/gojsontoyaml
    name: gojsontoyaml
  - url: github.com/hetznercloud/cli/cmd/hcloud
    name: hcloud
  # go dev tools
  - url: golang.org/x/tools/cmd/guru
    name: guru
  - url: golang.org/x/tools/gopls
    name: gopls
  - url: github.com/davidrjenni/reftools/cmd/fillstruct
    name: fillstruct
  - url: github.com/rogpeppe/godef
    name: godef
  - url: github.com/fatih/motion
    name: motion
  - url: github.com/kisielk/errcheck
    name: errcheck
  - url: github.com/go-delve/delve/cmd/dlv
    name: dlv
  - url: golang.org/x/tools/cmd/gorename
    name: gorename
  - url: github.com/koron/iferr
    name: iferr
  - url: golang.org/x/lint/golint
    name: golint
  - url: github.com/jstemmer/gotags
    name: gotags
  - url: github.com/josharian/impl
    name: impl
  - url: golang.org/x/tools/cmd/goimports
    name: goimports
  - url: github.com/fatih/gomodifytags
    name: gomodifytags
  - url: honnef.co/go/tools/cmd/keyify
    name: keyify
  - url: honnef.co/go/tools/cmd/staticcheck
    name: staticcheck
  - url: github.com/klauspost/asmfmt/cmd/asmfmt
    name: asmfmt
  - url: github.com/tomnomnom/gron
    name: gron
  - url: github.com/visualfc/gocode
    name: gocode

- name: install golangci-lint
  shell: |
    # go get install is not offically supported
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.31.0
  args:
    creates: "{{ GOPATH }}/bin/golangci-lint"

- name: install tfenv
  shell: |
    USERNAME={{ username }}
    git clone https://github.com/tfutils/tfenv.git /home/$USERNAME/.tfenv
    ln -s /home/$USERNAME/.tfenv/bin/* /home/$USERNAME/.local/bin/
    /home/$USERNAME/.tfenv/bin/tfenv install # installs latest
    /home/$USERNAME/.tfenv/bin/tfenv use latest
  args:
    creates: /home/{{ username }}/.local/bin/tfenv

- name: install packer
  shell: |
    curl -LO https://releases.hashicorp.com/packer/1.5.5/packer_1.5.5_linux_amd64.zip && \
    unzip *.zip && \
    sudo mv packer /home/{{ username }}/.local/bin/ && \
    rm *.zip
  args:
    creates: /home/{{ username }}/.local/bin/packer
    warn: false

- name: install vault
  shell: |
    curl -LO https://releases.hashicorp.com/vault/1.4.0/vault_1.4.0_linux_amd64.zip
    unzip vault*.zip
    mv vault /home/{{ username }}/.local/bin/vault
    rm vault*.zip
  args:
    creates: /home/{{ username }}/.local/bin/vault
    warn: false

- name: install stern
  shell: |
    curl -LO https://github.com/wercker/stern/releases/download/1.11.0/stern_linux_amd64
    chmod +x stern_linux_amd64
    sudo mv stern_linux_amd64 /home/{{ username }}/.local/bin/stern
  args:
    creates: /home/{{ username }}/.local/bin/stern
    warn: false

- name: install opa
  shell: |
    curl -LO https://github.com/open-policy-agent/opa/releases/download/v0.24.0/opa_linux_amd64
    chmod +x opa_linux_amd64
    sudo mv opa_linux_amd64 /home/{{ username }}/.local/bin/opa
  args:
    creates: /home/{{ username }}/.local/bin/stern
    warn: false

- name: install kubectl, kubens, kubectx
  shell: |
    curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    sudo mv ./kubectl /home/{{ username }}/.local/bin/kubectl
    curl -LO https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens
    curl -LO https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx
    chmod +x kubectx kubens
    mv kubectx kubens /home/{{ username }}/.local/bin/
  args:
    creates: /home/{{ username }}/.local/bin/kubectl
    warn: false

- name: install helm
  shell: |
    curl -LO https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
    tar -zxf helm-v3.4.0-linux-amd64.tar.gz
    mv linux-amd64/helm ~/.local/bin/
    rm -r linux-amd64 helm-v3.4.0-linux-amd64.tar.gz
  args:
    creates: /home/{{ username }}/.local/bin/helm
    warn: false

- name: install gcloud
  shell: |
    tee -a /etc/yum.repos.d/google-cloud-sdk.repo << EOM
    [google-cloud-sdk]
    name=Google Cloud SDK
    baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64
    enabled=1
    gpgcheck=1
    repo_gpgcheck=1
    gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
           https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    EOM

    dnf install -y google-cloud-sdk
  args:
    creates: /usr/bin/gcloud
  become: true

- name: install bitwarden cli
  shell: |
    set -ex
    USERNAME={{ username }}
    TEMP_DIR="$(mktemp -d)"
    cd $TEMP_DIR
    curl -L 'https://vault.bitwarden.com/download/?app=cli&platform=linux' > bw.zip
    unzip bw.zip
    chmod +x bw
    mv bw /home/$USERNAME/.local/bin/bw
    cd -
    rm -rf $TEMP_DIR
  args:
    creates: /home/{{ username }}/.local/bin/bw

- name: install yq
  shell: |
    USERNAME={{ username }}
    TEMP_DIR="$(mktemp -d)"
    cd $TEMP_DIR
    curl -LO 'https://github.com/mikefarah/yq/releases/download/3.4.0/yq_linux_amd64'
    chmod +x yq_linux_amd64
    mv yq_linux_amd64 /home/$USERNAME/.local/bin/yq
    cd -
    rm -rf $TEMP_DIR
  args:
    creates: /home/{{ username }}/.local/bin/yq

- name: install neovim remote
  shell: |
    pip3 install --user neovim-remote
  args:
    creates: /home/{{ username }}/.local/bin/nvr

- name: install alacritty-colorscheme
  shell: |
    pip install --user alacritty-colorscheme
  args:
    creates: /home/{{ username }}/.local/bin/alacritty-colorscheme
